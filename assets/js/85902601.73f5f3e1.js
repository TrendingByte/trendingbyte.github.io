"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6278],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},w=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),w=r,m=d["".concat(c,".").concat(w)]||d[w]||u[w]||a;return n?o.createElement(m,i(i({ref:t},p),{},{components:n})):o.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=w;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}w.displayName="MDXCreateElement"},9870:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:1},i="Use Electron with\xa0React",l={unversionedId:"electron/electron-with-react",id:"electron/electron-with-react",title:"Use Electron with\xa0React",description:"In this post, we'll explore how to use Electron with React to build cross-platform desktop applications. Electron is an open-source framework that allows developers to create native desktop applications using web technologies such as HTML, CSS, and JavaScript. React is a popular JavaScript library used for building user interfaces.",source:"@site/docs/electron/electron-with-react.md",sourceDirName:"electron",slug:"/electron/electron-with-react",permalink:"/docs/electron/electron-with-react",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Electron",permalink:"/docs/category/electron"},next:{title:"React Native",permalink:"/docs/category/react-native"}},c={},s=[],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"use-electron-withreact"},"Use Electron with\xa0React"),(0,r.kt)("p",null,"In this post, we'll explore how to use Electron with React to build cross-platform desktop applications. Electron is an open-source framework that allows developers to create native desktop applications using web technologies such as HTML, CSS, and JavaScript. React is a popular JavaScript library used for building user interfaces.\nTo get started, open your terminal and run the following code to create a new React application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"create-react-app <app-name>\ncd <app-name>\ncode .\n")),(0,r.kt)("p",null,"Next, we need to install some dependencies. In your terminal, enter the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm i concurrently wait-on cross-env electron\n")),(0,r.kt)("p",null,"Once the dependencies are installed, we need to configure our ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file. Check your Electron version in the ",(0,r.kt)("inlineCode",{parentName:"p"},"dependencies")," section and add the following scripts to the ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts")," section of the file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'"electron:serve": "concurrently -k \\"cross-env BROWSER=none npm start\\" \\"npm run electron:start\\"",\n"electron:build": "yarn build && electron-builder -c.extraMetadata.main=build/main.js",\n"electron:start": "wait-on tcp:3000 && electron ."\n')),(0,r.kt)("p",null,"We also need to add the following lines to the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file:This code added above scripts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'"main": "public/main.js",\n"homepage": "./",\n')),(0,r.kt)("p",null,"These lines tell Electron where to find the main entry point for the application and the root URL for the app."),(0,r.kt)("p",null,"Next, create a ",(0,r.kt)("inlineCode",{parentName:"p"},"main.js")," file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," folder and add the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="public/main.js"',title:'"public/main.js"'},'// Modules to control application life and create native browser window\nconst { app, BrowserWindow } = require("electron");\n\nconst createWindow = () => {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      enableRemoteModule: true,\n    },\n  });\n\n  // and load the index.html of the app.\n  mainWindow.loadURL("http://localhost:3000");\n\n  // Open the DevTools.\n  // mainWindow.webContents.openDevTools()\n};\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  createWindow();\n\n  app.on("activate", () => {\n    // On macOS it\'s common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow();\n  });\n});\n\n// Quit when all windows are closed, except on macOS. There, it\'s common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on("window-all-closed", () => {\n  if (process.platform !== "darwin") app.quit();\n});\n\n// In this file you can include the rest of your app\'s specific main process\n// code. You can also put them in separate files and require them here.\n')),(0,r.kt)("p",null,"This file creates a new browser window and loads the React application at ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),". You can customize the window's size and other properties as needed."),(0,r.kt)("p",null,"Finally, run the following command in your terminal to start your Electron React application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm run electron:serve\n")),(0,r.kt)("p",null,"This will launch your React application in a new Electron window, allowing you to build and test your desktop application using web technologies."),(0,r.kt)("p",null,"In conclusion, using Electron with React is a powerful way to build cross-platform desktop applications. With a few simple steps, you can create a fully functional desktop application using web technologies. If you're interested in learning more about Electron and"))}u.isMDXComponent=!0}}]);